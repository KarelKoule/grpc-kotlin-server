// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: hello_world.proto

package io.grpc.examples.helloworld

@kotlin.jvm.JvmName("-initializehelloRequest")
public inline fun helloRequest(block: io.grpc.examples.helloworld.HelloRequestKt.Dsl.() -> kotlin.Unit): io.grpc.examples.helloworld.HelloRequest =
    io.grpc.examples.helloworld.HelloRequestKt.Dsl._create(io.grpc.examples.helloworld.HelloRequest.newBuilder()).apply { block() }._build()
public object HelloRequestKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
        private val _builder: io.grpc.examples.helloworld.HelloRequest.Builder
    ) {
        public companion object {
            @kotlin.jvm.JvmSynthetic
            @kotlin.PublishedApi
            internal fun _create(builder: io.grpc.examples.helloworld.HelloRequest.Builder): Dsl = Dsl(builder)
        }

        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _build(): io.grpc.examples.helloworld.HelloRequest = _builder.build()

        /**
         * <code>string message = 1;</code>
         */
        public var message: kotlin.String
            @JvmName("getMessage")
            get() = _builder.getMessage()
            @JvmName("setMessage")
            set(value) {
                _builder.setMessage(value)
            }
        /**
         * <code>string message = 1;</code>
         */
        public fun clearMessage() {
            _builder.clearMessage()
        }

        /**
         * <code>int64 sleep = 2;</code>
         */
        public var sleep: kotlin.Long
            @JvmName("getSleep")
            get() = _builder.getSleep()
            @JvmName("setSleep")
            set(value) {
                _builder.setSleep(value)
            }
        /**
         * <code>int64 sleep = 2;</code>
         */
        public fun clearSleep() {
            _builder.clearSleep()
        }
    }
}
@kotlin.jvm.JvmSynthetic
public inline fun io.grpc.examples.helloworld.HelloRequest.copy(block: io.grpc.examples.helloworld.HelloRequestKt.Dsl.() -> kotlin.Unit): io.grpc.examples.helloworld.HelloRequest =
    io.grpc.examples.helloworld.HelloRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()
